local UserInputService = game:GetService("UserInputService")

local MainFrame = script.Parent.MainFrame
local OptionSpage = script.Parent.OptionSpage
local ScriptHub = script.Parent.ScriptHub
local SynapseXButton = script.Parent.SynapseXButton
local Lua_Keywords = {"and", "break", "do", "else", "elseif", "end", "false", "for", "function", "goto", "if", "in", "local", "nil", "not", "or", "repeat", "return", "then", "true", "until", "while"}
local Global_Env = {"getrawmetatable", "game", "workspace", "script", "math", "string", "table", "print", "wait", "BrickColor", "Color3", "next", "pairs", "ipairs", "select", "unpack", "Instance", "Vector2", "Vector3", "CFrame", "Ray", "UDim2", "Enum", "assert", "error", "warn", "tick", "loadstring", "_G", "shared", "getfenv", "setfenv", "newproxy", "setmetatable", "getmetatable", "os", "debug", "pcall", "ypcall", "xpcall", "rawequal", "rawset", "rawget", "tonumber", "tostring", "type", "typeof", "_VERSION", "coroutine", "delay", "require", "spawn", "LoadLibrary", "settings", "stats", "time", "UserSettings", "version", "Axes", "ColorSequence", "Faces", "ColorSequenceKeypoint", "NumberRange", "NumberSequence", "NumberSequenceKeypoint", "gcinfo", "elapsedTime", "collectgarbage", "PhysicalProperties", "Rect", "Region3", "Region3int16", "UDim", "Vector2int16", "Vector3int16"}
local Source = MainFrame.ImageLabel.EditorFrame.Source
local ScrollFrame = MainFrame.ImageLabel.EditorFrame
local Lines = Source.Parent.Lines

local currentTab

--Synapse X Button Controller

SynapseXButton.MouseButton1Click:Connect(function()
	MainFrame.Visible = true
	SynapseXButton.Visible = false
end)

--Synapse X ImageLabel Controller

local Highlight = function(string, keywords)
	local K = {}
	local S = string
	local Token =
		{
			["="] = true,
			["."] = true,
			[","] = true,
			["("] = true,
			[")"] = true,
			["["] = true,
			["]"] = true,
			["{"] = true,
			["}"] = true,
			[":"] = true,
			["*"] = true,
			["/"] = true,
			["+"] = true,
			["-"] = true,
			["%"] = true,
			[";"] = true,
			["~"] = true
		}
	for i, v in pairs(keywords) do
		K[v] = true
	end
	S = S:gsub(".", function(c)
		if Token[c] ~= nil then
			return "\32"
		else
			return c
		end
	end)
	S = S:gsub("%S+", function(c)
		if K[c] ~= nil then
			return c
		else
			return (" "):rep(#c)
		end
	end)
	return S
end
local hTokens = function(string)
	local Token =
		{
			["="] = true,
			["."] = true,
			[","] = true,
			["("] = true,
			[")"] = true,
			["["] = true,
			["]"] = true,
			["{"] = true,
			["}"] = true,
			[":"] = true,
			["*"] = true,
			["/"] = true,
			["+"] = true,
			["-"] = true,
			["%"] = true,
			[";"] = true,
			["~"] = true
		}
	local A = ""
	string:gsub(".", function(c)
		if Token[c] ~= nil then
			A = A .. c
		elseif c == "\n" then
			A = A .. "\n"
		elseif c == "\t" then
			A = A .. "\t"
		else
			A = A .. "\32"
		end
	end)
	return A
end

local strings = function(string)
	local highlight = ""
	local quote = false
	string:gsub(".", function(c)
		if quote == false and c == "\"" then
			quote = true
		elseif quote == true and c == "\"" then
			quote = false
		end
		if quote == false and c == "\"" then
			highlight = highlight .. "\""
		elseif c == "\n" then
			highlight = highlight .. "\n"
		elseif c == "\t" then
			highlight = highlight .. "\t"
		elseif quote == true then
			highlight = highlight .. c
		elseif quote == false then
			highlight = highlight .. "\32"
		end
	end)
	return highlight
end
local comments = function(string)
	local ret = ""
	string:gsub("[^\r\n]+", function(c)
		local comm = false
		local i = 0
		c:gsub(".", function(n)
			i = i + 1
			if c:sub(i, i + 1) == "--" then
				comm = true
			end
			if comm == true then
				ret = ret .. n
			else
				ret = ret .. "\32"
			end
		end)
		ret = ret
	end)
	return ret
end
local numbers = function(string)
	local A = ""
	string:gsub(".", function(c)
		if tonumber(c) ~= nil then
			A = A .. c
		elseif c == "\n" then
			A = A .. "\n"
		elseif c == "\t" then
			A = A .. "\t"
		else
			A = A .. "\32"
		end
	end)
	return A
end
local highlight_source = function(type)
	if type == "Text" then
		Source.Text = Source.Text:gsub("\13", "")
		Source.Text = Source.Text:gsub("\t", "      ")
		local s = Source.Text
		Source.Keywords_.Text = Highlight(s, Lua_Keywords)
		Source.Globals_.Text = Highlight(s, Global_Env)
		Source.RemoteHighlight_.Text = Highlight(s, {"FireServer", "fireServer", "InvokeServer", "invokeServer"})
		Source.Tokens_.Text = hTokens(s)
		Source.Numbers_.Text = numbers(s)
		Source.Strings_.Text = strings(s)
		local lin = 1
		s:gsub("\n", function()
			lin = lin + 1
		end)
		Lines.Text = ""
		for i = 1, lin do
			Lines.Text = Lines.Text .. i .. "\n"
		end
	end
end
highlight_source("Text")
Source.Changed:Connect(highlight_source)
Source:GetPropertyChangedSignal("Text"):Connect(function()
	local count = 1

	Source.Text:gsub("\n", function()
		count = count + 1
	end)
	ScrollFrame.CanvasSize = UDim2.new(0, 1500, count/16.6, 0)
	Source.Size = UDim2.new(0, 598, 0, 249 + (count > 16 and 16*(count-16) or 0))
end)

--Synapse X Main Frame Controller

local dragging
local dragInput
local dragStart
local startPos

local function update(input)
	local delta = input.Position - dragStart
	MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

MainFrame.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		dragStart = input.Position
		startPos = MainFrame.Position

		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
			end
		end)
	end
end)

MainFrame.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
		dragInput = input
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if input == dragInput and dragging then
		update(input)
	end
end)

--Synapse X Tabs Controller

local function getTabs()
	local tabs = {}
	for _, v in pairs(MainFrame.ImageLabel.Tabs:GetChildren()) do
		if v.Name:match("Tab_%d+") then
			tabs[#tabs + 1] = v
		end
	end
	return tabs
end

local function showTab(tab)
	currentTab = tab
	if not tab then
		MainFrame.ImageLabel.EditorFrame.Source.Text = ""
		return
	end
	tab.ScriptTitle.Size = UDim2.new(0,55,0,19)
	tab.ScriptTitle.Position = UDim2.new(tab.ScriptTitle.Position.X.Scale, 0, -0.074, 0)
	tab.RemoveTab.Size = UDim2.new(0, 19, 0, 19)
	tab.RemoveTab.Position = UDim2.new(tab.RemoveTab.Position.X.Scale, 0, -0.074, 0)

	MainFrame.ImageLabel.EditorFrame.Source.Text = tostring(tab.Script.Value)
	for i, v in pairs(getTabs()) do
		if v ~= currentTab then
			v.ScriptTitle.Size = UDim2.new(0, 45, 0, 17)
			v.ScriptTitle.Position = UDim2.new(v.ScriptTitle.Position.X.Scale, 0, -0.066, 0)
			v.RemoveTab.Size = UDim2.new(0, 24, 0, 17)
			v.RemoveTab.Position = UDim2.new(v.RemoveTab.Position.X.Scale, 0, -0.066, 0)
		end
	end
end
local function removeTab(tab)
	local tabs = getTabs()
	local idx = 0
	for i = 1, #tabs do
		if tabs[i] == tab then
			idx = i
			tabs[i]:Destroy()
			table.remove(tabs, i)
		end
	end

	local lastTab do
		if #tabs > 0 then
			lastTab = tabs[#tabs]
		end
	end

	for i, v in pairs(tabs) do
		v.ScriptTitle.Position = tabs[i - 1] and UDim2.new(tabs[i - 1].ScriptTitle.Position.X.Scale + 0.103, 0, -0.074, 0) or UDim2.new(0, 0, -0.074, 0)
		v.RemoveTab.Position = UDim2.new(v.ScriptTitle.Position.X.Scale + 0.067, 0, -0.074, 0)
	end

	MainFrame.ImageLabel.Tabs.NewTab.Position = lastTab and lastTab.RemoveTab.Position + UDim2.new(0.046, 0, 0.008, 0) or UDim2.new(0, 0, -0.066, 0)
	showTab(currentTab ~= tab and currentTab or tabs[idx] or tabs[idx - 1])
end

local function newTab()
	local tabs = getTabs()
	local tab = Instance.new("Folder", MainFrame.ImageLabel.Tabs)
	local titlescript = Instance.new("TextButton", tab)
	local remove = Instance.new("TextButton", tab)
	local tabScript = Instance.new("StringValue", tab)
	local lastTab do
		if #tabs > 0 then
			lastTab = tabs[#tabs]
		end
	end

	tab.Name = ("Tab_%d"):format(#tabs + 1)

	titlescript.Name = "ScriptTitle"
	titlescript.BackgroundColor3 = Color3.fromRGB(107, 107, 107)
	titlescript.BorderSizePixel = 0
	titlescript.Position = lastTab and UDim2.new(lastTab.ScriptTitle.Position.X.Scale + 0.103, 0, -0.074, 0) or UDim2.new(0, 0, -0.074, 0)
	titlescript.Size = UDim2.new(0, 44,0, 19)
	titlescript.Font = Enum.Font.SourceSans
	titlescript.TextColor3 = Color3.fromRGB(255, 255, 255)
	titlescript.TextSize = 15
	titlescript.Text = ("Script %d"):format(#tabs + 1)

	remove.Name = "RemoveTab"
	remove.BackgroundColor3 = Color3.fromRGB(107, 107, 107)
	remove.BorderSizePixel = 0
	remove.Position = UDim2.new(titlescript.Position.X.Scale + 0.067, 0, -0.074, 0)
	remove.Size = UDim2.new(0, 24, 0, 19)
	remove.Font = Enum.Font.SourceSans
	remove.TextColor3 = Color3.fromRGB(255, 255, 255)
	remove.TextSize = 14
	remove.Text = "x"

	tabScript.Name = "Script"

	MainFrame.ImageLabel.Tabs.NewTab.Position = remove.Position + UDim2.new(0.046, 0, 0.008, 0)

	showTab(tab)

	titlescript.MouseButton1Click:Connect(function()
		showTab(tab)
	end)
	remove.MouseButton1Click:Connect(function()
		removeTab(tab)
	end)

	return tab
end

currenTab = newTab()

showTab(currentTab)

MainFrame.ImageLabel.Tabs.NewTab.MouseButton1Click:Connect(function()
	newTab()
end)

MainFrame.ImageLabel.EditorFrame.Source:GetPropertyChangedSignal("Text"):Connect(function()
	currentTab.Script.Value = MainFrame.ImageLabel.EditorFrame.Source.Text
end)

